/**
@mainpage LiquidMenu

Callback functions
------------------
###### Attaching a function example:
```c++
// This example demonstrates how to attach a function to some line. The
// callback function will change a variable and write its value to a
// pin. It will be attached to `led_line` under the number 1.

...
const byte ledPin = 3;
// We need a variable that holds the state.
byte ledState = 0;
LiquidLine led_line(0, 0, "LED: ", ledState);

/*
Callback functions for changing some state need to change the variable that
is printed on the display and in this case write it to the appropriate pin.
*/
void inc_led() {
	ledState += 10;
	analogWrite(ledPin, ledState);
}
...

void setup() {
    // The `void inc_led()` function is attached under number 1.
	led_line.attach_function(1, inc_led);
}

```

### Calling a function
To call an attached function it needs to be focused (selected) using the `void LiquidMenu::switch_focus()` function. When the function is selected, it can be called with `bool LiquidMenu::call_function(byte number)`.
Similar functions should be attached with the same number to the different lines. For example 'incrementing functions' can be attached with the number 1, then with a button press (*button 'UP' preferably*), the focused line's incrementing function will be called.

###### Methods used:
```c++
void LiquidMenu::switch_focus(bool forward = true);
```
Switches the focus to the next **line**.

```c++
void LiquidMenu::call_function(byte number);
```
Calls the attached function for the currently focused line identified by `number`.


###### Calling a function example:
```c++
/// This example demonstrates how to call an attached function.
...
void loop() {
    // We need to be able to move the focus between the lines.
    if (middleButton) {
    	menu.switch_focus();
    }
    // If the 'UP' button is pressed - call the function
    // identified as 1 for the focused line.
    if (upButton) {
    	menu.call_function(1);
    }
}
```


Customizing the focus indicator
-------------------------------
The **focus indicator** on default appears just after the line.
It can be configured to appear before the line or in a custom absolute position.
If it appears after the line the symbol used is '<', before the line - '>', in a custom position - the symbol a square. These symbols can be changed individually.

###### Methods used:
```c++
bool LiquidLine::set_focusPosition(Position position, byte column = 0, byte row = 0);
```
Configures the focus position for the **line**. Takes a position from the **`Position`** enum class (*`LEFT`, `RIGHT` or `CUSTOM`*), if the specified position is `CUSTOM` then a column and row for the focus indicator need to be specified.

```c++
bool LiquidScreen::set_focusPosition(Position position);
```
Same as above, but configures a focus position for a whole **screen**. `CUSTOM` position can't be configured with this method because it needs individual column and row parameters.

```c++
bool LiquidMenu::set_focusPosition(Position position);
```
Same as above, but for a whole **menu**.

```c++
bool LiquidSystem::set_focusPosition(Position position);
```
Same as above, but for a whole **menu system**.

```c++
bool LiquidMenu::set_focusSymbol(Position position, byte symbol[8]);
```
Changes the focus symbol for the specified position.

```c++
bool LiquidMenu::set_focusSymbol(Position position, byte symbol[8])
```
Same as above (*because of the way the symbol is stored*).


###### Customizing the focus indicator example:
```c++
// This example demonstrates how to customize the focus indicator
// position and appearance.

...
// Indicator symbol definition. Create a new one from [here](http://omerk.github.io/lcdchargen/).
byte lFocus[8] = {
	0b00000,
	0b00000,
	0b00100,
	0b01110,
	0b00100,
	0b00000,
	0b00000,
	0b00000
};

void setup() {
    // Set the focus position for `line1` to `CUSTOM`.
	line1.set_focusPosition(Position::CUSTOM, 3, 0);
	// Set the focus position for `screen2` to `LEFT`.
	screen2.set_focusPosition(Position::LEFT);

    // Change the left focus indicator symbol to the specified one.
	menu.set_focusSymbol(Position::LEFT, lFocus);
}

```
*/

/**
@example hello_menu.ino

Simple example demonstrating the use of two screens printing
text and variables. The screens change automatically every
few seconds.
 */

/**
@example serial_menu.ino

Demonstrates the usage of four screens which are controlled
through serial...
 */

/**
@example buttons_menu.ino

Demonstrates the use of buttons to cycle between screens
and dynamically changing the text printed on the display.
 */

/**
@example functions_menu.ino

Demonstrates how a function can be attached to a particular
line and then called through a button press.
 */

/**
@example focus_menu.ino

Demonstrates how to change the position and symbol of the
focus indicator.
 */

/**
@example system_menu.ino

Demonstrates how to implement a system of menus.
 */
